#extension GL_OES_standard_derivatives : enable

uniform float opacity;
varying vec3 vViewPosition;
varying vec3 vLightFront;

#if MAX_POINT_LIGHTS > 0
    uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];
    uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];
    uniform float pointLightDistance[ MAX_POINT_LIGHTS ];
#endif

#if MAX_DIR_LIGHTS > 0
    uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];
    uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];
#endif

#if MAX_HEMI_LIGHTS > 0
    uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];
    uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];
    uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];
#endif

uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 ambientLightColor;

#ifdef USE_COLOR
    varying vec3 vColor;
#endif

#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )
    varying vec2 vUv;
#endif

#ifdef USE_FOG
    uniform vec3 fogColor;
    #ifdef FOG_EXP2
        uniform float fogDensity;
    #else
        uniform float fogNear;
        uniform float fogFar;
    #endif
#endif

varying float noise;
varying vec3 objectNormal;

void main() {
    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );

    #ifdef USE_NOISE
        vec3 normal = mix(objectNormal,
            normalize(cross(dFdx(vViewPosition), dFdy(vViewPosition))), 0.75);
    #else
        vec3 normal = objectNormal;
    #endif

    #ifdef USE_MAP
        vec4 texelColor = texture2D( map, vUv );
        #ifdef GAMMA_INPUT
            texelColor.xyz *= texelColor.xyz;
        #endif
        gl_FragColor = gl_FragColor * texelColor;
    #endif

    #ifdef ALPHATEST
        if ( gl_FragColor.a < ALPHATEST ) discard;
    #endif

    float specularStrength;

    #ifdef USE_FOG
        float depth = gl_FragCoord.z / gl_FragCoord.w;
        #ifdef FOG_EXP2
            const float LOG2 = 1.442695;
            float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );
            fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );
        #else
            float fogFactor = smoothstep( fogNear, fogFar, depth );
        #endif
        gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );
    #endif

    vec3 color = vec3(0,0,0);

    #if MAX_POINT_LIGHTS > 0
        for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {
            vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );
            vec3 lVector = lPosition.xyz - vViewPosition;
            float lDistance = 1.0;

            // if ( pointLightDistance[ i ] > 0.0 )
              // lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );

            lVector = normalize( lVector );
            float dotProduct = dot( normal, lVector );
            vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );
            color = pointLightColor[ i ] * pointLightWeighting * lDistance;
        }
    #endif
    #if MAX_HEMI_LIGHTS > 0
        for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {
            vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );
            vec3 lVector = normalize( lDirection.xyz );
            float dotProduct = dot( normal, lVector );
            float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;
            float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;
            color += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );
        }
    #endif
    #if MAX_DIR_LIGHTS > 0
        for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {
            vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );
            vec3 dirVector = normalize( lDirection.xyz );
            float dotProduct = dot( normal, dirVector );
            vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );
            color += directionalLightColor[ i ] * directionalLightWeighting;
        }
    #endif

    color = color * diffuse + ambient * ambientLightColor + emissive;
    gl_FragColor *= vec4(color, 1.0);
}