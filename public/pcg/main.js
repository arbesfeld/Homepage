PCG = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "EOL": parse_EOL,
        "WS": parse_WS,
        "line": parse_line,
        "blank": parse_blank,
        "SAMEDENT": parse_SAMEDENT,
        "INDENT": parse_INDENT,
        "DEDENT": parse_DEDENT,
        "statement": parse_statement,
        "comma_identifier": parse_comma_identifier,
        "ident_list": parse_ident_list,
        "expression": parse_expression,
        "COMPOSITE_OP": parse_COMPOSITE_OP,
        "composite": parse_composite,
        "COMP_OP": parse_COMP_OP,
        "comparative": parse_comparative,
        "modulo": parse_modulo,
        "ADDITIVE_OP": parse_ADDITIVE_OP,
        "additive": parse_additive,
        "MULT_OP": parse_MULT_OP,
        "multiplicative": parse_multiplicative,
        "power": parse_power,
        "primary": parse_primary,
        "comma_expression": parse_comma_expression,
        "arglist": parse_arglist,
        "VALID_FIRST_CHAR": parse_VALID_FIRST_CHAR,
        "VALID_CHAR": parse_VALID_CHAR,
        "identifier": parse_identifier,
        "number_frac": parse_number_frac,
        "number": parse_number
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_blank();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_blank();
        }
        if (result0 !== null) {
          result1 = parse_INDENT();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_blank();
            if (result3 === null) {
              result3 = parse_line();
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_blank();
              if (result3 === null) {
                result3 = parse_line();
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) { return lines; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EOL() {
        var result0;
        
        if (input.substr(pos, 2) === "\r\n") {
          result0 = "\r\n";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 10) {
            result0 = "\n";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_WS() {
        var result0, result1;
        
        result0 = [];
        if (input.charCodeAt(pos) === 32) {
          result1 = " ";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.charCodeAt(pos) === 32) {
            result1 = " ";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
        }
        return result0;
      }
      
      function parse_line() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SAMEDENT();
        if (result0 !== null) {
          result1 = parse_statement();
          if (result1 !== null) {
            result2 = parse_WS();
            if (result2 !== null) {
              result3 = parse_EOL();
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                result4 = [];
                result5 = parse_blank();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_blank();
                }
                if (result4 !== null) {
                  result5 = parse_INDENT();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_blank();
                    if (result7 === null) {
                      result7 = parse_line();
                    }
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_blank();
                      if (result7 === null) {
                        result7 = parse_line();
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_DEDENT();
                      if (result7 !== null) {
                        result4 = [result4, result5, result6, result7];
                      } else {
                        result4 = null;
                        pos = pos3;
                      }
                    } else {
                      result4 = null;
                      pos = pos3;
                    }
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                if (result4 !== null) {
                  result4 = (function(offset, b, c) { return b.concat(c); })(pos2, result4[0], result4[2]);
                }
                if (result4 === null) {
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, statement, children) { return {statement:statement, children: children === "" ? [] : children}; })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_blank() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t]");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse_EOL();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return undefined; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SAMEDENT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t]");
            }
          }
        }
        if (result0 !== null) {
          result1 = (function(offset, i) { return i.join("") === indent; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INDENT() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = (function(offset, i) { return i.length > indent.length; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, i) { indentStack.push(indent); indent = i.join(""); pos = offset; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DEDENT() {
        var result0;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (result0 !== null) {
          result0 = (function(offset) { indent = indentStack.pop(); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 61) {
              result2 = "=";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_expression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, expr) { return { tag:"=", left:v, right:expr }; })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 6) === "lathe ") {
            result0 = "lathe ";
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"lathe \"");
            }
          }
          if (result0 !== null) {
            result1 = parse_WS();
            if (result1 !== null) {
              result2 = parse_expression();
              if (result2 !== null) {
                result3 = parse_WS();
                if (result3 !== null) {
                  result4 = parse_expression();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, tStep, yStep) { return { tag:"lathe", tStep:tStep, yStep:yStep }; })(pos0, result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 6) === "choose") {
              result0 = "choose";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"choose\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return { tag:"choose"}; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 7) === "option ") {
                result0 = "option ";
                pos += 7;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"option \"");
                }
              }
              if (result0 !== null) {
                result1 = parse_WS();
                if (result1 !== null) {
                  result2 = parse_expression();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, expr) { return { tag:"option", expr:expr}; })(pos0, result0[2]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 5) === "seed ") {
                  result0 = "seed ";
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"seed \"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_WS();
                  if (result1 !== null) {
                    result2 = parse_identifier();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, v) { return { tag:"seed", v:v}; })(pos0, result0[2]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 4) === "set ") {
                    result0 = "set ";
                    pos += 4;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"set \"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_WS();
                    if (result1 !== null) {
                      result2 = parse_identifier();
                      if (result2 !== null) {
                        result3 = parse_WS();
                        if (result3 !== null) {
                          result4 = parse_expression();
                          if (result4 !== null) {
                            result0 = [result0, result1, result2, result3, result4];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, v, expr) { return { tag:"set", left:v, right:expr }; })(pos0, result0[2], result0[4]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    if (input.substr(pos, 2) === "<3") {
                      result0 = "<3";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"<3\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = [];
                      if (/^[^\n]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("[^\\n]");
                        }
                      }
                      while (result2 !== null) {
                        result1.push(result2);
                        if (/^[^\n]/.test(input.charAt(pos))) {
                          result2 = input.charAt(pos);
                          pos++;
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("[^\\n]");
                          }
                        }
                      }
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset) { return undefined; })(pos0);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      if (input.substr(pos, 4) === "def ") {
                        result0 = "def ";
                        pos += 4;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"def \"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_WS();
                        if (result1 !== null) {
                          result2 = parse_identifier();
                          if (result2 !== null) {
                            if (input.charCodeAt(pos) === 40) {
                              result3 = "(";
                              pos++;
                            } else {
                              result3 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"(\"");
                              }
                            }
                            if (result3 !== null) {
                              result4 = parse_WS();
                              if (result4 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                  result5 = ")";
                                  pos++;
                                } else {
                                  result5 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result5 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, v) { return { tag:"def", name:v, args:[]}; })(pos0, result0[2]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        if (input.substr(pos, 4) === "def ") {
                          result0 = "def ";
                          pos += 4;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"def \"");
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_WS();
                          if (result1 !== null) {
                            result2 = parse_identifier();
                            if (result2 !== null) {
                              result3 = parse_WS();
                              if (result3 !== null) {
                                if (input.charCodeAt(pos) === 40) {
                                  result4 = "(";
                                  pos++;
                                } else {
                                  result4 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"(\"");
                                  }
                                }
                                if (result4 !== null) {
                                  result5 = parse_WS();
                                  if (result5 !== null) {
                                    result6 = parse_ident_list();
                                    if (result6 !== null) {
                                      result7 = parse_WS();
                                      if (result7 !== null) {
                                        if (input.charCodeAt(pos) === 41) {
                                          result8 = ")";
                                          pos++;
                                        } else {
                                          result8 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result8 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, v, args) { return { tag:"def", name:v, args:args }; })(pos0, result0[2], result0[6]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          if (input.substr(pos, 3) === "if ") {
                            result0 = "if ";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"if \"");
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse_WS();
                            if (result1 !== null) {
                              result2 = parse_expression();
                              if (result2 !== null) {
                                result0 = [result0, result1, result2];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, expr) { return { tag:"if", expr:expr}; })(pos0, result0[2]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            if (input.substr(pos, 5) === "loop ") {
                              result0 = "loop ";
                              pos += 5;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"loop \"");
                              }
                            }
                            if (result0 !== null) {
                              result1 = parse_WS();
                              if (result1 !== null) {
                                result2 = parse_identifier();
                                if (result2 !== null) {
                                  result3 = parse_WS();
                                  if (result3 !== null) {
                                    result4 = parse_expression();
                                    if (result4 !== null) {
                                      result5 = parse_WS();
                                      if (result5 !== null) {
                                        result6 = parse_expression();
                                        if (result6 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, v, start, end) { return { tag:"loop", v:v, start:start, end:end}; })(pos0, result0[2], result0[4], result0[6]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              if (input.substr(pos, 7) === "repeat ") {
                                result0 = "repeat ";
                                pos += 7;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"repeat \"");
                                }
                              }
                              if (result0 !== null) {
                                result1 = parse_WS();
                                if (result1 !== null) {
                                  result2 = parse_expression();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, expr) { return { tag:"repeat", expr:expr}; })(pos0, result0[2]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                if (input.substr(pos, 7) === "return ") {
                                  result0 = "return ";
                                  pos += 7;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"return \"");
                                  }
                                }
                                if (result0 !== null) {
                                  result1 = parse_WS();
                                  if (result1 !== null) {
                                    result2 = parse_expression();
                                    if (result2 !== null) {
                                      result0 = [result0, result1, result2];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, expr) { return { tag:"return", body:expr}; })(pos0, result0[2]);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  pos1 = pos;
                                  if (input.substr(pos, 10) === "transform ") {
                                    result0 = "transform ";
                                    pos += 10;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"transform \"");
                                    }
                                  }
                                  if (result0 !== null) {
                                    pos2 = pos;
                                    pos3 = pos;
                                    result2 = parse_WS();
                                    if (result2 !== null) {
                                      result3 = parse_expression();
                                      if (result3 !== null) {
                                        result2 = [result2, result3];
                                      } else {
                                        result2 = null;
                                        pos = pos3;
                                      }
                                    } else {
                                      result2 = null;
                                      pos = pos3;
                                    }
                                    if (result2 !== null) {
                                      result2 = (function(offset, expr) { return expr; })(pos2, result2[1]);
                                    }
                                    if (result2 === null) {
                                      pos = pos2;
                                    }
                                    if (result2 !== null) {
                                      result1 = [];
                                      while (result2 !== null) {
                                        result1.push(result2);
                                        pos2 = pos;
                                        pos3 = pos;
                                        result2 = parse_WS();
                                        if (result2 !== null) {
                                          result3 = parse_expression();
                                          if (result3 !== null) {
                                            result2 = [result2, result3];
                                          } else {
                                            result2 = null;
                                            pos = pos3;
                                          }
                                        } else {
                                          result2 = null;
                                          pos = pos3;
                                        }
                                        if (result2 !== null) {
                                          result2 = (function(offset, expr) { return expr; })(pos2, result2[1]);
                                        }
                                        if (result2 === null) {
                                          pos = pos2;
                                        }
                                      }
                                    } else {
                                      result1 = null;
                                    }
                                    if (result1 !== null) {
                                      result0 = [result0, result1];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, exprs) { return { tag:"transform", exprs:exprs}; })(pos0, result0[1]);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                  if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    if (input.substr(pos, 10) === "translate ") {
                                      result0 = "translate ";
                                      pos += 10;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"translate \"");
                                      }
                                    }
                                    if (result0 !== null) {
                                      result1 = parse_WS();
                                      if (result1 !== null) {
                                        result2 = parse_expression();
                                        if (result2 !== null) {
                                          result3 = parse_WS();
                                          if (result3 !== null) {
                                            result4 = parse_expression();
                                            if (result4 !== null) {
                                              result5 = parse_WS();
                                              if (result5 !== null) {
                                                result6 = parse_expression();
                                                if (result6 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, x, y, z) { return { tag:"translate", xExpr:x, yExpr:y, zExpr:z }; })(pos0, result0[2], result0[4], result0[6]);
                                    }
                                    if (result0 === null) {
                                      pos = pos0;
                                    }
                                    if (result0 === null) {
                                      pos0 = pos;
                                      pos1 = pos;
                                      if (input.substr(pos, 6) === "scale ") {
                                        result0 = "scale ";
                                        pos += 6;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"scale \"");
                                        }
                                      }
                                      if (result0 !== null) {
                                        result1 = parse_WS();
                                        if (result1 !== null) {
                                          result2 = parse_expression();
                                          if (result2 !== null) {
                                            result3 = parse_WS();
                                            if (result3 !== null) {
                                              result4 = parse_expression();
                                              if (result4 !== null) {
                                                result5 = parse_WS();
                                                if (result5 !== null) {
                                                  result6 = parse_expression();
                                                  if (result6 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, x, y, z) { return { tag:"scale", xExpr:x, yExpr:y, zExpr:z }; })(pos0, result0[2], result0[4], result0[6]);
                                      }
                                      if (result0 === null) {
                                        pos = pos0;
                                      }
                                      if (result0 === null) {
                                        pos0 = pos;
                                        pos1 = pos;
                                        if (input.substr(pos, 7) === "rotate ") {
                                          result0 = "rotate ";
                                          pos += 7;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"rotate \"");
                                          }
                                        }
                                        if (result0 !== null) {
                                          result1 = parse_WS();
                                          if (result1 !== null) {
                                            result2 = parse_expression();
                                            if (result2 !== null) {
                                              result3 = parse_WS();
                                              if (result3 !== null) {
                                                result4 = parse_expression();
                                                if (result4 !== null) {
                                                  result5 = parse_WS();
                                                  if (result5 !== null) {
                                                    result6 = parse_expression();
                                                    if (result6 !== null) {
                                                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, x, y, z) { return { tag:"rotate", xExpr:x, yExpr:y, zExpr:z }; })(pos0, result0[2], result0[4], result0[6]);
                                        }
                                        if (result0 === null) {
                                          pos = pos0;
                                        }
                                        if (result0 === null) {
                                          pos0 = pos;
                                          pos1 = pos;
                                          if (input.substr(pos, 7) === "sphere ") {
                                            result0 = "sphere ";
                                            pos += 7;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"sphere \"");
                                            }
                                          }
                                          if (result0 !== null) {
                                            result1 = parse_WS();
                                            if (result1 !== null) {
                                              result2 = parse_expression();
                                              if (result2 !== null) {
                                                result0 = [result0, result1, result2];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, q) { return { tag:"sphere", q:q }; })(pos0, result0[2]);
                                          }
                                          if (result0 === null) {
                                            pos = pos0;
                                          }
                                          if (result0 === null) {
                                            pos0 = pos;
                                            pos1 = pos;
                                            if (input.substr(pos, 5) === "cube ") {
                                              result0 = "cube ";
                                              pos += 5;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"cube \"");
                                              }
                                            }
                                            if (result0 !== null) {
                                              result1 = parse_WS();
                                              if (result1 !== null) {
                                                result2 = parse_expression();
                                                if (result2 !== null) {
                                                  result0 = [result0, result1, result2];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, q) { return { tag:"cube", q:q }; })(pos0, result0[2]);
                                            }
                                            if (result0 === null) {
                                              pos = pos0;
                                            }
                                            if (result0 === null) {
                                              pos0 = pos;
                                              pos1 = pos;
                                              if (input.substr(pos, 6) === "plane ") {
                                                result0 = "plane ";
                                                pos += 6;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"plane \"");
                                                }
                                              }
                                              if (result0 !== null) {
                                                result1 = parse_WS();
                                                if (result1 !== null) {
                                                  result2 = parse_expression();
                                                  if (result2 !== null) {
                                                    result0 = [result0, result1, result2];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, q) { return { tag:"plane", q:q }; })(pos0, result0[2]);
                                              }
                                              if (result0 === null) {
                                                pos = pos0;
                                              }
                                              if (result0 === null) {
                                                pos0 = pos;
                                                pos1 = pos;
                                                if (input.substr(pos, 10) === "displacen ") {
                                                  result0 = "displacen ";
                                                  pos += 10;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"displacen \"");
                                                  }
                                                }
                                                if (result0 !== null) {
                                                  result1 = parse_WS();
                                                  if (result1 !== null) {
                                                    result2 = parse_expression();
                                                    if (result2 !== null) {
                                                      result0 = [result0, result1, result2];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, noise) { return { tag:"displacen", noise:noise}; })(pos0, result0[2]);
                                                }
                                                if (result0 === null) {
                                                  pos = pos0;
                                                }
                                                if (result0 === null) {
                                                  pos0 = pos;
                                                  if (input.substr(pos, 8) === "displace") {
                                                    result0 = "displace";
                                                    pos += 8;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"displace\"");
                                                    }
                                                  }
                                                  if (result0 !== null) {
                                                    result0 = (function(offset) { return { tag:"displace" }; })(pos0);
                                                  }
                                                  if (result0 === null) {
                                                    pos = pos0;
                                                  }
                                                  if (result0 === null) {
                                                    pos0 = pos;
                                                    if (input.substr(pos, 9) === "displacev") {
                                                      result0 = "displacev";
                                                      pos += 9;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"displacev\"");
                                                      }
                                                    }
                                                    if (result0 !== null) {
                                                      result0 = (function(offset) { return { tag:"displacev" }; })(pos0);
                                                    }
                                                    if (result0 === null) {
                                                      pos = pos0;
                                                    }
                                                    if (result0 === null) {
                                                      pos0 = pos;
                                                      if (input.substr(pos, 4) === "func") {
                                                        result0 = "func";
                                                        pos += 4;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"func\"");
                                                        }
                                                      }
                                                      if (result0 !== null) {
                                                        result0 = (function(offset) { return { tag:"displaceFunc" }; })(pos0);
                                                      }
                                                      if (result0 === null) {
                                                        pos = pos0;
                                                      }
                                                      if (result0 === null) {
                                                        pos0 = pos;
                                                        result0 = parse_expression();
                                                        if (result0 !== null) {
                                                          result0 = (function(offset, expr) { return { tag:"ignore", body:expr }; })(pos0, result0);
                                                        }
                                                        if (result0 === null) {
                                                          pos = pos0;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_comma_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 44) {
          result0 = ",";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ident_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_comma_identifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_comma_identifier();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) { return [first].concat(rest); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expression() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_composite();
        if (result0 !== null) {
          result0 = (function(offset, expr) { return expr; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_COMPOSITE_OP() {
        var result0;
        
        if (input.substr(pos, 3) === "and") {
          result0 = "and";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"and\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "or") {
            result0 = "or";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"or\"");
            }
          }
        }
        return result0;
      }
      
      function parse_composite() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_comparative();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_COMPOSITE_OP();
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_composite();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, op, right) { return { tag: op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_comparative();
        }
        return result0;
      }
      
      function parse_COMP_OP() {
        var result0;
        
        if (input.substr(pos, 2) === "<=") {
          result0 = "<=";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<=\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === ">=") {
            result0 = ">=";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "!=") {
              result0 = "!=";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"!=\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "==") {
                result0 = "==";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 60) {
                  result0 = "<";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_comparative() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_modulo();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_COMP_OP();
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_comparative();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, op, right) { return { tag: op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_modulo();
        }
        return result0;
      }
      
      function parse_modulo() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_additive();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 37) {
              result2 = "%";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_modulo();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, right) { return {tag:"%", left:left, right:right}; })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_additive();
        }
        return result0;
      }
      
      function parse_ADDITIVE_OP() {
        var result0;
        
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
        }
        return result0;
      }
      
      function parse_additive() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_multiplicative();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_ADDITIVE_OP();
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_additive();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_multiplicative();
        }
        return result0;
      }
      
      function parse_MULT_OP() {
        var result0;
        
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 47) {
            result0 = "/";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
        }
        return result0;
      }
      
      function parse_multiplicative() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_power();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            result2 = parse_MULT_OP();
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_multiplicative();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_power();
        }
        return result0;
      }
      
      function parse_power() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_primary();
        if (result0 !== null) {
          result1 = parse_WS();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 94) {
              result2 = "^";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WS();
              if (result3 !== null) {
                result4 = parse_power();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, right) { return {tag:"^", left:left, right:right}; })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_primary();
        }
        return result0;
      }
      
      function parse_primary() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        result0 = parse_number();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_identifier();
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 40) {
              result1 = "(";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_WS();
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result3 = ")";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return { tag:"call", name:v, args:[] }; })(pos0, result0[0]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_identifier();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result1 = "(";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_WS();
                if (result2 !== null) {
                  result3 = parse_arglist();
                  if (result3 !== null) {
                    result4 = parse_WS();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        result5 = ")";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v, args) { return { tag:"call", name:v, args:args }; })(pos0, result0[0], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_identifier();
              if (result0 !== null) {
                result0 = (function(offset, v) { return { tag:"ident", name:v }; })(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 40) {
                  result0 = "(";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_WS();
                  if (result1 !== null) {
                    result2 = parse_expression();
                    if (result2 !== null) {
                      result3 = parse_WS();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                          result4 = ")";
                          pos++;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, expr) { return expr; })(pos0, result0[2]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_comma_expression() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_WS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_WS();
            if (result2 !== null) {
              result3 = parse_expression();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) { return expr; })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_arglist() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_expression();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_comma_expression();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_comma_expression();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) { return [first].concat(rest); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VALID_FIRST_CHAR() {
        var result0;
        
        if (/^[a-zA-Z_]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        return result0;
      }
      
      function parse_VALID_CHAR() {
        var result0;
        
        if (/^[0-9a-zA-Z_]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-zA-Z_]");
          }
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_VALID_FIRST_CHAR();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_VALID_CHAR();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_VALID_CHAR();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, neg, firstchar, chars) { return {neg:neg ? true : false, name:firstchar + chars.join('')}; })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_number_frac() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return "." + chars.join(''); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          if (/^[0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_number_frac();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result1 = (function(offset, chars, frac) { return chars.join('') + frac; })(pos2, result1[0], result1[1]);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            pos3 = pos;
            result1 = [];
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result1 !== null) {
              result2 = parse_number_frac();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos3;
              }
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              result1 = (function(offset, chars, frac) { return chars.join('') + frac; })(pos2, result1[0], result1[1]);
            }
            if (result1 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, neg, num) { return parseFloat(neg + num); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
       var indentStack = [], indent = ""; 
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
